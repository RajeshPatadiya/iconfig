{"name":"Iconfig - Instant Configuration","tagline":"A simple, smart, dynamic configuration manager for PHP applications.","body":"# Iconfig\r\n\r\nA very simple, light-weight and smart configuration manager for PHP applications.\r\n\r\nIconfig (Instant Config) could be used as a stand alone component to manage the configuration of any php application. It can load\r\nsettings saved in a php file and build an array which would be available at run time. It provides useful methods to set or retrieve any configuration at the run time of an application.\r\n\r\n## An Example\r\nBasically a php applications or `mvc` framework use array for configurations, for example, this is a sample of database configuration\r\n```PHP\r\nreturn array(\r\n \t'default' => 'mysql',\r\n\t'connections' => array(\r\n\t\t'sqlite' => array(\r\n\t\t\t'driver'   => 'sqlite',\r\n\t\t\t'database' => 'public/caliber.sqlite',\r\n\t\t\t'prefix'   => 'cb_',\r\n\t\t),\r\n\t\t'mysql' => array(\r\n\t\t\t'driver'    => 'mysql',\r\n\t\t\t'host'      => 'localhost',\r\n\t\t\t'database'  => 'caliber',\r\n\t\t\t'username'  => 'root',\r\n\t\t\t'password'  => 'bossboss',\r\n\t\t\t'charset'   => 'utf8',\r\n\t\t\t'collation' => 'utf8_unicode_ci',\r\n\t\t\t'prefix'    => 'cb_',\r\n\t\t)\r\n   ),\r\n);\r\n```\r\nAn `mvc` framework or an applicarion without any framework must have some common settings and user can configure those according to his/her need and\r\nmost often all configuration files reside in a single folder, commonly, the `config` name is used. So, keeping that on mind, this dynamic configuration\r\nmanager (or whatever you say) has been built, which loads all files from a given path. For example :\r\n```PHP\r\n$config = new Iconfig\\Config('config');\r\n```\r\nAbove code will load all files from the `config` folder (it expects arrays inside files) and will put everything in an array (groups using file name). Now, you can set/get any\r\nitem from the array. For example, if you want to get the `default` item from the array, then you cn use\r\n```PHP\r\n$default = $config->getDatabase('default'); // mysql\r\n```\r\nNow, what is `getDatabase` ? Actually, in this example, I've used the file name `database.php` for this array so I can use `getDatabase()` and `setDatabase()` to get or set an item.\r\nIf I have a file named with `session.php` then I can use `getSession()` and `setSession()` to get or set any settings for session management. Which means, when you will pass the path\r\n(where you all configuration files are saved) to the constructor it'l load all 'php' files from that path/folder. So If, for example, in a folder named `settings` you have three files\r\ninside that folder as `database.php`, `session.php` and for example `chache.php` and if you initialize it using\r\n```PHP\r\n$settings = new Iconfig\\Config('settings');\r\n```\r\nThen, it'll load all three `php` files from the folder and it'll create one associative array using three groups like\r\n```PHP\r\nArray(\r\n  'database' => array(\r\n    'default' => 'mysql',\r\n    'connections' => array(\r\n\t\t    'sqlite' => array(\r\n\t\t\t  'driver'   => 'sqlite',\r\n\t\t\t  'database' => 'public/caliber.sqlite',\r\n\t\t\t  'prefix'   => 'cb_',\r\n\t\t  )\r\n  ),\r\n  'session' => array(\r\n    'driver' => 'native',\r\n    'lifetime' 120,\r\n    'files' => '/sessions'\r\n  ),\r\n  'chache' =>array(\r\n    'path' => 'c:/web/app/storage'\r\n  )\r\n);\r\n```\r\nNow, you can use,\r\n```PHP\r\n$settings->setDatabase('default', 'sqlite');\r\n$settings->getDatabase('default'); // sqlite\r\n\r\n$settings->setSession('lifetime', 240);\r\n$settings->getSession('lifetime'); // 240\r\n```\r\n\r\nIf you want you can set an `Alias` and can use methods `statically` like\r\n```PHP\r\nnew Iconfig\\Config('../myApp/config', 'Config'); // Config as Alias, you can use any name\r\nif(Config::isExist('session')) {\r\n    Config::setSession('driver', 'database');\r\n    $sessionArray = Config::getSession(); // full array will be returned when called without argument\r\n}\r\n```\r\nSome more examples (use a callback function with `getMethod($key, $callback)`)\r\n```PHP\r\n$connections = Config::getDatabase('connections', function($data){\r\n  if(is_array($data) && array_key_exists('sqlite', $data)) {\r\n\t\tConfig::setDatabase('connections.sqlite.driver', 'myNewSqliteDriver');\r\n\t\treturn Config::getDatabase('connections'); // this will return connections array with new value\r\n\t}\r\n});\r\n```\r\nAlso you can use a defult value like\r\n```PHP\r\n$chache = getChache('path', '/web') // if path doesn't exist then \"/web\" will be returned\r\n```\r\nIf you have three database connections and all have a driver `key` then you can specify which `driver` key you want like\r\n```PHP\r\nConfig::getDatabase('connections.sqlite.driver'); // get the driver from sqlite\r\nConfig::getDatabase('connections.pgsql.driver'); // get the driver from pgsql\r\n```\r\nSame could be used when setting a value like `setDatabase('connections.pgsql.driver', 'pgsql')`. \r\n\r\nYou can also use `::find()` to search for an item as\r\n```PHP\r\nConfig::find('sqlite'); // if it exists, you'll get the value\r\nConfig::find('connections.sqlite'); // it'll look sqlite in to the connections\r\nConfig::find('connections.sqlite.driver'); it'll look driver in to the connections.sqlite array\r\n```\r\nAlso you can use\r\n```PHP\r\n$all = Config::getAll();\r\nvar_dump($all); // full configuration array will be returned\r\n```\r\n\r\nYou can also use\r\n```PHP\r\nConfig::load('filePath'); new items will be added.\r\n```\r\nThat's all for now. Hope, I'll be able to add more features in future, In Sha Allah! (on God's will).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}